
// module code

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 08.07.2024 08:24:38
// Design Name: 
// Module Name: booth_multiplier
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module booth_multiplier(

    input [3:0] multiplicand,
    input [3:0] multiplier,
    output reg [7:0] product
    
    );
    
    reg [3:0] A, Q, M;
    reg Q_1;
    integer count;

    initial begin
        product = 8'b0;
    end

    always @(*) begin
        // Initialize registers
        A = 4'b0;
        Q = multiplier;
        M = multiplicand;
        Q_1 = 1'b0;
        count = 4;

        while (count > 0) begin
            // Booth's algorithm step
            case ({Q[0], Q_1})
                2'b01: A = A + M;        // Add multiplicand to A
                2'b10: A = A - M;        // Subtract multiplicand from A
                default: A = A;          // No operation
            endcase

            // Arithmetic right shift (A, Q, Q_1)
            Q_1 = Q[0];
            Q = {A[0], Q[3:1]};
            A = {A[3], A[3:1]};          // Sign extend A

            count = count - 1;
        end

        // Combine A and Q to get the product
        product = {A, Q};
    end
endmodule

// testbench

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 08.07.2024 08:27:32
// Design Name: 
// Module Name: booth_multiplier_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module booth_multiplier_tb();
    reg [3:0] multiplicand;
    reg [3:0] multiplier;
    wire [7:0] product;
    
     booth_multiplier uut (
        .multiplicand(multiplicand),
        .multiplier(multiplier),
        .product(product)
    );
    
     initial begin
        // Display format for outputs
        $monitor("Time=%0d multiplicand=%d multiplier=%d product=%d", $time, multiplicand, multiplier, product);

        // Test case 1: 3 * 2 = 6
        multiplicand = 4'b0011; // 3
        multiplier = 4'b0010;   // 2
        #10;

        // Test case 2: -3 * 2 = -6
        multiplicand = 4'b1101; // -3 in 2's complement
        multiplier = 4'b0010;   // 2
        #10;

        // Test case 3: 2 * -2 = -4
        multiplicand = 4'b0010; // 2
        multiplier = 4'b1110;   // -2 in 2's complement
        #10;

        // Test case 4: -2 * -2 = 4
        multiplicand = 4'b1110; // -2 in 2's complement
        multiplier = 4'b1110;   // -2 in 2's complement
        #10;

        // Test case 5: 4 * 4 = 16
        multiplicand = 4'b0100; // 4
        multiplier = 4'b0100;   // 4
        #10;

        // Test case 6: 0 * 3 = 0
        multiplicand = 4'b0000; // 0
        multiplier = 4'b0011;   // 3
        #10;

        // Test case 7: 3 * 0 = 0
        multiplicand = 4'b0011; // 3
        multiplier = 4'b0000;   // 0
        #10;

        // End the simulation
        $finish;
    end
endmodule

